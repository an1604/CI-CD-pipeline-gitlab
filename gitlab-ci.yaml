image: alpine:latest 

stages: # There are 3 stages in our case:
  - build # Building the project
  - test # All the scans 
  - report # The uplaod all the reports to the DefectDojo's server 

variables: # Global variables
  SAST_IMAGE_SUFFIX: '-fips' # Federal Information Processing Standard for SAST Scan.
  IMAGE_NAME: avivnat13/webgoat_ns # Image name of mine, for build the image.
  IMAGE_TAG: "latest" 
  CI_PROJECT_DIR: /builds/root/webgoat_ns


dependency-check: # The dependency check scan
  stage: test
  image:
    name: owasp/dependency-check:latest # Using the owasp dependency-check
    entrypoint: [""]
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --project SCA_Test --out . --format XML --scan $CI_PROJECT_DIR --suppression ./suppressions.xml --disableNodeAudit --disableRetireJS
  artifacts:
    paths:
      - dependency-check-report.xml

      

 zap-automation-fullscan: # Run the official webgoat's container before this scan!
   stage: test
   image:
     name: ictu/zap2docker-weekly:latest
     entrypoint: [""]
   variables:
     ZAP_ALERT_REPORT: alert-report
     ZAP_REPORT: fullscan
   script:
     - bash zap_automation_baseline_scan.sh
   only:
     refs:
     - branches
   artifacts:
     when: always
     expire_in: 1 week
     paths:
       - ${CI_PROJECT_DIR}/${ZAP_REPORT}.xml
       - ${CI_PROJECT_DIR}/${ZAP_ALERT_REPORT}.md


 kics-iac-sast:v # The IaC scan.
   variables:
     SAST_ANALYZER_IMAGE_TAG: "3.1"
   artifacts:
     paths:
       - gl-sast-report.json


 build-image:  # The build phase, bulding the image for the project.
   stage: build
   image: docker:24.0.2
   services:
     - docker:24.0.2-dind # Using docker in docker format.
   variables: 
     DOCKER_TLS_CERTDIR: "/certs" 
   before_script:  
     - docker login -u avivnat13 -p $REGISTRY_PASS 
   script:
   - docker build -t $IMAGE_NAME:$IMAGE_TAG .
   - docker push $IMAGE_NAME:$IMAGE_TAG
   - docker run -d --name my_container -p 9090:9090 $IMAGE_NAME:$IMAGE_TAG
   after_script:
     - docker port my_container
     - docker inspect my_container
 

container_scanning: 
   stage: test
   script:
     - gtcs scan $IMAGE_NAME:$IMAGE_TAG
   artifacts:
     paths:
       - gl-container-scanning-report.json


 secret_detection:
   stage: test
   artifacts:
    paths:
      -  gl-secret-detection-report.json 

 sast:
   stage: test
   artifacts:
    paths:
      -  gl-sast-report.json 

 update_dast_report:
   stage: report
   script:
     - apk add --no-cache curl
     - echo "Uploading ZAP scan report to DefectDojo..."
     - ls -l
     - |
        curl -X 'POST' \
            'http://192.168.37.128:8080/api/v2/import-scan/' \
          -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -H 'Authorization: Token cfc2ea835d37379a78e1f30e26e2cef40377e793' \
            -F 'minimum_severity=' \
            -F 'scan_type=ZAP Scan' \
            -F 'file=@fullscan.xml;type=application/json' \
            -F 'product_type_name=Research and Development' \
            -F 'product_name=test_product' \
            -F 'engagement_name=DAST engagement' \
            -F 'active=false' \
            -F 'verified=false' \




 upload_secret_detection_report:
   stage: report
   script:
     - apk add --no-cache curl
     - echo "Uploading Secret Detection report to DefectDojo..."
     - ls -l
     - |
        curl -X 'POST' \
            'http://192.168.37.128:8080/api/v2/import-scan/' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -H 'Authorization: Token cfc2ea835d37379a78e1f30e26e2cef40377e793' \
            -F 'minimum_severity=' \
            -F 'scan_type=GitLab Secret Detection Report' \
            -F 'file=@gl-secret-detection-report.json ;type=application/json' \
            -F 'product_type_name=Research and Development' \
            -F 'product_name=test_product' \
            -F 'engagement_name=secret detection engagement' \
            -F 'active=false' \
            -F 'verified=false' \

 upload_sast_report:
   stage: report
   script:
     - apk add --no-cache curl
     - echo "Uploading SAST report to DefectDojo..."
     - ls -l
     - |
        curl -X 'POST' \
            'http://192.168.37.128:8080/api/v2/import-scan/' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -H 'Authorization: Token cfc2ea835d37379a78e1f30e26e2cef40377e793' \
            -F 'minimum_severity=' \
            -F 'scan_type=GitLab SAST Report' \
            -F 'file=@gl-sast-report.json ;type=application/json' \
            -F 'product_type_name=Research and Development' \
            -F 'product_name=test_product' \
            -F 'engagement_name=SAST scan engagement' \
            -F 'active=false' \
            -F 'verified=false' \

 upload_iac_report:
   stage: report
   script:
     - apk add --no-cache curl
     - echo "Uploading IaC SAST report to DefectDojo..."
     - ls -l
     - |
        curl -X 'POST' \
            'http://192.168.37.128:8080/api/v2/import-scan/' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -H 'Authorization: Token cfc2ea835d37379a78e1f30e26e2cef40377e793' \
            -F 'minimum_severity=' \
            -F 'scan_type=GitLab SAST Report' \
            -F 'file=@gl-sast-report.json ;type=application/json' \
            -F 'product_type_name=Research and Development' \
            -F 'product_name=test_product' \
            -F 'engagement_name=IaC engagement' \
            -F 'active=false' \
            -F 'verified=false' \


upload_dependency_scanning_report:
  stage: report
  script:
    - apk add --no-cache curl
    - echo "Uploading SCA (Dependency-Scanning) report to DefectDojo..."
    - ls -l
    - |
       curl -X 'POST' \
           'http://192.168.37.128:8080/api/v2/import-scan/' \
           -H 'accept: application/json' \
           -H 'Content-Type: multipart/form-data' \
           -H 'Authorization: Token cfc2ea835d37379a78e1f30e26e2cef40377e793' \
           -F 'minimum_severity=' \
           -F 'scan_type=Dependency Check Scan' \
           -F 'file=@dependency-check-report.xml;type=application/json' \
           -F 'product_type_name=Research and Development' \
           -F 'product_name=test_product' \
           -F 'engagement_name=SCA-engagement' \
           -F 'active=false' \
           -F 'verified=false' \



 include:
   - template: Security/Secret-Detection.gitlab-ci.yml # Secret detection scan
   - template: Security/SAST.gitlab-ci.yml # SAST scan
   - template: Jobs/SAST-IaC.gitlab-ci.yml # IaC scanning 
   - template: Jobs/Container-Scanning.gitlab-ci.yml # Container Scanning
  
s